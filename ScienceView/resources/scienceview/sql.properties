SELECT.CONTENT.DOCUMENT = SELECT title, research_address, abstract, keywords, authors_keywords, year, GCC, doi, first_page, end_page, pdf_file, journal FROM Documents WHERE id_doc = ? AND id_collection = ?
SELECT.TIMESCITED.DOCUMENT = SELECT GCC FROM Documents WHERE id_doc=? AND id_collection=?
SELECT.DOCUMENT.ABSTRACT = SELECT abstract FROM Documents WHERE id_collection=? AND id_doc=?
SELECT.DOCUMENT.CLASS = SELECT class FROM Documents WHERE id_collection = ? AND id_doc= ?
SELECT.DOCUMENT.DATE = SELECT year FROM Documents WHERE id_collection=? AND id_doc=?
SELECT.DOCUMENT.DOI = SELECT doi FROM Documents WHERE id_collection=? AND id_doc=?
SELECT.DOCUMENT.KEYWORDS = SELECT keywords FROM Documents WHERE id_collection=? AND id_doc=?
SELECT.DOCUMENT.TITLE = SELECT title FROM Documents WHERE id_collection = ? AND id_doc= ?
SELECT.DOCUMENT.YEAR = SELECT year FROM Documents WHERE id_collection=? AND id_doc=?
SELECT.DISTINCT.YEARS = SELECT DISTINCT year FROM Documents WHERE id_collection=? ORDER BY year
SELECT.DOCUMENTS.IDS = SELECT id_doc FROM Documents WHERE id_collection = ?
SELECT.ID.DOCUMENTS.FROM.YEAR.ORDER.BY.TITLE.ORDER.BY.TITLE = SELECT id_doc FROM Documents WHERE id_collection=? AND year=? order by title
SELECT.ID.DOCUMENTS.FROM.YEAR = SELECT id_doc FROM Documents WHERE id_collection=? AND year=?
SELECT.ID.DOCUMENTS.FROM.YEAR.TO.YEAR = SELECT id_doc FROM Documents WHERE id_collection=? AND year>=? AND year<=? ORDER BY id_doc
SELECT.ID.DOCUMENTS.FROM.AUTHOR.TO.YEAR = Select id_doc from doCUMENTS_TO_AUTHORS where ID_AUTHOR in(SELECT ID_AUTHOR FROM AUTHORS where name=? and ID_COLLECTION =?) and id_doc in(SElect id_doc from documents where year<=?)

SELECT.NUMBER.DOCUMENTS = SELECT COUNT(*) AS id FROM Documents WHERE id_collection = ?
SELECT.PDF.DOCUMENT = SELECT pdf_file FROM Documents WHERE id_collection=? AND id_doc=?
SELECT.CITATION.WITH.DOI = SELECT id_citation FROM CITATIONS WHERE doi=? AND id_collection=?

SELECT.NGRAMS.COLLECTION = SELECT grams FROM Collections WHERE id_collection = ?
SELECT.COLLECTIONS = SELECT id_collection, name FROM Collections ORDER BY id_collection, name
SELECT.COLLECTION.BY.NAME = SELECT id_collection FROM Collections WHERE name = ?
SELECT.COLLECTION.FILENAME = SELECT filename FROM Collections WHERE id_collection = ?
SELECT.NUMBER.GRAMS = SELECT nrGrams FROM Collections WHERE id_collection = ?
REMOVE.COLLECTION_BY_NAME = DELETE FROM Collections WHERE name = ?
REMOVE.COLLECTION_BY_ID = DELETE FROM Collections WHERE id_collection = ?
SELECT.NGRAMS.DOCUMENT = SELECT grams FROM Documents WHERE id_doc = ? AND id_collection = ?

SELECT.IDAUTHOR.REFERENCE = SELECT id_author FROM CITATIONS Where CITATIONS.id_citation=? and CITATIONS.id_collection=?
SELECT.REFERENCE = SELECT full_reFERENCE  FROM CITATIONS where id_CITATION =? and iD_COLLECTION = ?
SELECT.SAME.REFERENCE = SELECT id_citation FROM CITATIONS Where id_author= ? AND year = ? AND volume = ? AND pages = ? AND id_collection=? AND journal=? 
SELECT.MIN.ID.CITATION = Select min(id_citation) from CITATIONS where id_collection=?
COUNT.UNIQUE.REFERENCES = SELECT count(*) FROM CITATIONS WHERE id_collection=?
COUNT.ID_AUTHORS.OCCURRENCES.CITATIONS = SELECT id_author, count(id_author) FROM CITATIONS where id_AUTHOR <>-1 and iD_COLLECTION =? group by id_AUTHOR
SELECT.REFERENCES.COLLECTION = SELECT * FROM (SELECT id_CITATION , count(*) as freq FROM DOCUMENTS_TO_CITATIONS where id_COLLECTION =? group by ID_CITATION order by freq desc) WHERE freq > 1
DOES.THIS.DOCUMENT.CITES.THIS.REFERENCE = SELECT id_doc FROM DOCUMENTS_TO_CITATIONS where ID_doc = ? AND id_CITATION = ? and id_COLLECTION  = ?
SELEC.CITATIONS.FROM.DOCUMENT = SELECT id_citation FROM DOCUMENTS_TO_CITATIONS WHERE id_collection=? AND id_doc=? ORDER BY id_citation
COUNT.CITATIONS.FROM.DOCUMENT = SELECT count(id_citation) FROM DOCUMENTS_TO_CITATIONS WHERE id_collection=? AND id_doc=?
SELECT.NUMBER.OF.REFERENCES = SELECT count(*) FROM DOCUMENTS_TO_CITATIONS WHERE id_collection=? 
SELECT.REFERENCES.DOCUMENT = SELECT FULL_reference FROM CITATIONS INNER JOIN docUMENTS_TO_CITATIONS ON CITATIONS.ID_CITATION = DOCUMENTS_TO_CITATIONS.ID_CITATION WHERE DOCUMENTS_TO_CITATIONS.ID_DOC = ? AND doCUMENTS_TO_CITATIONS.ID_COLLECTION =? order by full_reference
SELECT.TEN.TOP.CITED.AUTHORS = SELECT ID_AUTHOR ,NAME, FREQ from authors inner join (SELECT TOP 10 count(*) as FREQ,  id_author as aux FROM CITATIONS  group by ID_AUTHOR order by FREQ desc) where aux=authors.id_author
SELECT.TEN.TOP.AUTHORS = SELECT ID_AUTHOR ,NAME, FREQ  from authors inner join (SELECT TOP 10 COUNT(*) AS FREQ, ID_AUTHOR AS AUX FROM DOCUMENTS_TO_AUTHORS  GROUP BY ID_AUTHOR ORDER BY FREQ DESC) where aux=authors.id_author
SELECT.MAIN.AUTHORS = SELECT name, COUNT(authors.id_author) as c FROM DOCUMENTS_TO_AUTHORS INNER JOIN authors where id_DOC in (?) AND aUTHORS.ID_AUTHOR =dOCUMENTS_TO_AUTHORs.ID_AUTHOR AND AUTHORS.ID_COLLECTION =? GROUP BY Authors.ID_AUTHOR order by c desc


COUNT.NUMBER.OF.CLASSES = SELECT count(distinct(class)) FROM DOCUMENTS WHERE id_collection=?
SELECT.DOCUMENT.WITH.TITLE = Select count(id_doc) FROM DOCUMENTS WHERE title=? AND id_collection=?
SEARCH.TERM= SELECT id_doc, (length(concat(title, ' ' ,abstract, ' ', keywords, ' ', authors_keywords) ) - length(replace(concat(title, ' ' ,abstract, ' ', keywords, ' ', authors_keywords) , ?, '')))/length(?)  FROM DOCUMENTS where length(concat(title, ' ' ,abstract, ' ', keywords, ' ', authors_keywords) ) - length(replace(concat(title, ' ' ,abstract, ' ', keywords, ' ', authors_keywords) , ?, '')) >0 AND ID_COLLECTION=?


SELECT.AUTHORS.FROM.DOCUMENT = Select name from Authors Where id_author in (Select id_author from doCUMENTS_TO_AUTHORS where id_DOC =? and ID_COLLECTION =? order by author_order)
COUNT.ID_AUTHORS.OCCURRENCES.DOCUMENTS = SELECT id_author, count(id_author)  FROM DOCUMENTS_TO_AUTHORS where iD_COLLECTION =? group by id_AUTHOR  
SELECT.IDAUTHOR.FIRSTAUTHOR.DOCUMENT = SELECT id_author from DOCUMENTS_TO_AUTHORS WHERE DOCUMENTS_TO_AUTHORS.ID_DOC =? and DOCUMENTS_TO_AUTHORS.ID_COLLECTION=? AND AUTHOR_ORDER=1
SELECT.NAME.AUTHOR = SELECT name FROM AUTHORS where id_AUTHOR =?
SELECT.FIRST.AUTHOR = SELECT AUTHORS.ID_AUTHOR FROM AUTHORS WHERE AUTHORS.ID_AUTHOR =(SELECT DOCUMENTS_TO_AUTHORS.ID_AUTHOR  FROM DOCUMENTS_TO_AUTHORS WHERE 
SELECT.SAME.AUTHOR = SELECT id_author FROM Authors Where name = ? 

BIBLIOGRAPHIC.COUPLING = SELECT COUNT(id_citation) AS BC FROM ((SELECT id_citation FROM DOCUMENTS_TO_CITATIONS WHERE ID_DOC =? AND ID_COLLECTION=?) INTERSECT(SELECT id_citation FROM DOCUMENTS_TO_CITATIONS WHERE ID_DOC = ? AND ID_COLLECTION=?))
MATCH.CORE.REFERENCES = (SELECT id_DOC ,id_cITATION  FROM CITATIONS, doCUMENTS where ciTATIONS.doi=doCUMENTS.doI and Citations.id_collection=? and DOCUMENTS.id_COLLECTION=?) UNION (SELECT DISTINCT idd, idc FROM(SELECT id_doc as idd, Citations.id_citation as idc, Citations.id_AUTHOR as idca FROM Documents, Citations WHERE Citations.type NOT LIKE 'UNPUB' AND CiTATIONS.type NOT LIKE 'INPRESS' AND Documents.journal_abbrev=Citations.journal AND Documents.year=Citations.year AND Documents.volume=Citations.volume AND Documents.first_page=Citations.pages AND Citations.id_collection=? AND Documents.id_collection=?), dOCUMENTS_TO_AUTHORS WHERE idca =dOCUMENTS_TO_AUTHORS .id_author AND author_order=1)
CORE.REFERENCES = SELECT id_citation,id_doc_core FROM CITATIONS where id_DOC_CORE <>-1 AND id_collection = ?
DOCUMENTS.CITING.REFERENCE = SELECT id_doc FROM DOCUMENTS_TO_CITATIONS where id_ciTATION = ? and id_collection = ?

COAUTHORSHIP=select count(id_author) from ((select id_author from documents_to_authors  where id_doc =? and id_collection=?) intersect (select id_author from documents_to_authors  where id_doc =? and id_collection=?))

CREATE.TABLE.COLLECTIONS = CREATE TABLE IF NOT EXISTS Collections (id_collection INTEGER NOT NULL AUTO_INCREMENT, name VARCHAR(100) NOT NULL UNIQUE, filename  VARCHAR(1000) NOT NULL, nrGrams INTEGER NOT NULL, format VARCHAR(3) NOT NULL, grams LONGVARBINARY, PRIMARY KEY (id_collection))
CREATE.TABLE.AUTHORS = CREATE TABLE IF NOT EXISTS Authors(id_author INTEGER NOT NULL AUTO_INCREMENT, name VARCHAR(50) NOT NULL, id_collection INTEGER NOT NULL, PRIMARY KEY(id_author,id_collection), FOREIGN KEY (id_collection) REFERENCES Collections(id_collection) ON DELETE CASCADE)
CREATE.TABLE.CONTENT = CREATE TABLE IF NOT EXISTS Documents (id_doc INTEGER NOT NULL, id_collection INTEGER NOT NULL, type INTEGER, title LONGVARCHAR, research_address LONGVARCHAR, abstract LONGVARCHAR, keywords LONGVARCHAR, authors_keywords LONGVARCHAR, year INTEGER NOT NULL, GCC INTEGER DEFAULT 0, LCC INTEGER DEFAULT 0, doi VARCHAR(70), first_page VARCHAR(20), end_page VARCHAR(20), pdf_file VARCHAR(200), journal VARCHAR(200), journal_abbrev VARCHAR(100), volume VARCHAR(30), class INTEGER DEFAULT 0, grams LONGVARBINARY, PRIMARY KEY (id_doc, id_collection), FOREIGN KEY (id_collection) REFERENCES Collections (id_collection) ON DELETE CASCADE)


CREATE.TABLE.REFERENCES = CREATE TABLE IF NOT EXISTS Citations (id_citation INTEGER NOT NULL AUTO_INCREMENT, id_collection INTEGER NOT NULL, type VARCHAR (10),id_author INTEGER, year INTEGER, journal VARCHAR(100),  volume VARCHAR(30), chapter VARCHAR(30), doi VARCHAR(70), pages VARCHAR(20), artn VARCHAR(20), full_reference LONGVARCHAR NOT NULL, id_doc_core INTEGER, PRIMARY KEY (id_citation, id_collection), FOREIGN KEY (id_collection) REFERENCES Collections(id_collection) ON DELETE CASCADE)

CREATE.TABLE.DOCUMENTS.TO.REFERENCES = CREATE TABLE IF NOT EXISTS Documents_to_citations (id_doc INTEGER NOT NULL, id_collection INTEGER NOT NULL,id_citation INTEGER NOT NULL, PRIMARY KEY(id_doc,id_collection,id_citation), FOREIGN KEY (id_doc,id_collection) REFERENCES Documents (id_doc,id_collection) ON DELETE CASCADE, FOREIGN KEY (id_citation) REFERENCES Citations (id_citation) ON DELETE CASCADE)
CREATE.TABLE.DOCUMENTS.TO.AUTHORS = CREATE TABLE IF NOT EXISTS Documents_to_authors (id_doc INTEGER NOT NULL, id_collection INTEGER NOT NULL, id_author INTEGER NOT NULL, author_order INTEGER NOT NULL, FOREIGN KEY(id_doc, id_collection) REFERENCES Documents(id_doc,id_collection) ON DELETE CASCADE, FOREIGN KEY (id_author) REFERENCES Authors(id_author) ON DELETE CASCADE)


INSERT.COLLECTION = INSERT INTO Collections (name, filename, nrgrams, format) VALUES (?, ?, ?, ?)
INSERT.CONTENT = INSERT INTO Documents(id_doc, id_collection, type, title, research_address, abstract, keywords, authors_keywords, year, GCC, doi, first_page, end_page, pdf_file, journal, journal_abbrev, volume, class) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
INSERT.REFERENCE = INSERT INTO Citations (id_collection, id_author, type, year, journal, volume, chapter, doi, pages, artn, full_reference, id_doc_core) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
INSERT.DOCUMENT.TO.REFERENCE = INSERT INTO Documents_to_citations (id_doc, id_collection, id_citation) VALUES (?, ?, ?)
INSERT.AUTHOR = INSERT INTO Authors (name,id_collection) VALUES (?,?)
INSERT.DOCUMENT.TO.AUTHOR = INSERT INTO Documents_to_authors(id_doc, id_collection, id_author, author_order) VALUES (?, ?, ?, ?)

UPDATE.NGRAMS.COLLECTION = UPDATE Collections SET grams = ? WHERE (id_collection = ?)
UPDATE.NGRAMS.DOCUMENT = UPDATE Documents SET grams = ? WHERE id_doc = ? AND id_collection = ?
UPDATE.REFERENCE = UPDATE Citations SET id_doc_core = ? WHERE id_citation = ? AND id_collection = ?
UPDATE.CLASS.DOCUMENTS = UPDATE Documents SET class=? WHERE id_doc IN (?) AND id_collection=?
UPDATE.LCC.DOCUMENT = UPDATE Documents SET LCC=? WHERE id_doc=? AND id_collection=?

CREATE.INDEX.REFERENCES = CREATE INDEX IF NOT EXISTS mergereferences ON Citations(year, pages, id_author, volume, journal, doi)
CREATE.INDEX.AUTHORS = CREATE INDEX IF NOT EXISTS mergeauthors ON Authors(name,id_collection)
CREATE.INDEX.MATCH = CREATE INDEX IF NOT EXISTS mergecorereferences ON Documents(journal_abbrev, year, volume, first_page, id_collection)
CREATE.INDEX.BC = CREATE INDEX IF NOT EXISTS bibliographic_coupling ON Documents_to_citations (id_doc, id_collection)
DROP.INDEX.BC = DROP INDEX IF EXISTS bibliographic_coupling

DROP.TABLE.COLLECTIONS = DROP TABLE Collections IF EXISTS
DROP.TABLE.AUTHORS = DROP TABLE Authors IF EXISTS
DROP.TABLE.DOCUMENTS = DROP TABLE Documents IF EXISTS
DROP.TABLE.REFERENCES = DROP TABLE Citations IF EXISTS
DROP.TABLE.DOCUMENTS.TO.REFERENCES = DROP TABLE Documents_to_citations IF EXISTS
DROP.TABLE.DOCUMENTS.TO.AUTHORS = DROP TABLE Documents_to_authors IF EXISTS
DROP.TABLE.CORE.REFERENCES = DROP TABLE Core_citations IF EXISTS

SAVE.SCRIPT.COLLECTIONS= SELECT * FROM Collections WHERE id_collection=?
SAVE.SCRIPT.AUTHORS= SELECT * FROM Authors WHERE id_collection=?
SAVE.SCRIPT.REFERENCES = SELECT ID_CITATION, ID_COLLECTION, TYPE, ID_AUTHOR, YEAR, JOURNAL, VOLUME, CHAPTER, DOI, PAGES, ARTN, FULL_REFERENCE, ID_DOC_CORE FROM Citations WHERE id_collection=? 
SAVE.SCRIPT.DOCUMENTS = SELECT * FROM Documents WHERE id_collection=? 
SAVE.SCRIPT.DOCUMENTS.TO.REFERENCES = SELECT * FROM Documents_to_citations WHERE id_collection=? 
SAVE.SCRIPT.DOCUMENTS.TO.AUTHORS = SELECT * FROM Documents_to_authors WHERE id_collection=? 

SELECT.MAX.IDCOLLECTION = SELECT MAX(id_collection) FROM Collections

DUMP = SCRIPT TO ?

COUNT.TRUELBL = SELECT COUNT(id_doc) FROM Documents WHERE id_collection=? AND Documents.class=1
COUNT.NOTLBL = SELECT COUNT(id_doc) FROM Documents WHERE id_collection=? AND Documents.class=2
COUNT.MAYBE = SELECT COUNT(id_doc) FROM Documents WHERE id_collection=? AND Documents.class=3
COUNT.ERRADO = SELECT DISTINCT class FROM Documents WHERE id_collection=?
COUNT.TOTAL = SELECT COUNT(id_doc) FROM Documents WHERE id_collection=?
SEE.AUTHORS.REFERENCES.TRUELBL = SELECT authors FROM Citations Where id_citation IN (SELECT id_reference FROM Documents_to_citations WHERE id_doc IN (SELECT id_doc FROM Documents WHERE class=1) AND id_collection=?)
TESTE = SELECT authors FROM citations WHERE id_reference IN (SELECT id_reference FROM Documents_to_citations WHERE id_doc IN (SELECT id_doc FROM Documents WHERE class=1) AND id_collection=?) ORDER BY authors
TESTE2 = SELECT id_reference, authors, year, volume, pages FROM Citations ORDER BY authors, year, volume, pages ASC
