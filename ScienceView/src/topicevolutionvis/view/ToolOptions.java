/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PreferencesDialog.java
 *
 * Created on 06/05/2009, 14:04:00
 */
package topicevolutionvis.view;

import java.awt.Color;
import java.awt.Font;
import topicevolutionvis.graph.Vertex;
import topicevolutionvis.projection.temporal.TemporalProjection;
import topicevolutionvis.topic.CovarianceTopicSettings;
import topicevolutionvis.topic.LDATopicSettings;
import topicevolutionvis.topic.PCATopicSettings;
import topicevolutionvis.topic.TopicData.TopicType;
import topicevolutionvis.topic.TopicData.TopicVisualization;
import topicevolutionvis.view.tools.LDADialog;

/**
 *
 * @author Aretha
 */
public class ToolOptions extends javax.swing.JDialog {

    private static ToolOptions instance;
    private static final long serialVersionUID = 1L;
    private TemporalProjectionViewer temporalViewer;
    private TemporalProjection tprojection;

    /**
     * Creates new form PreferencesDialog
     */
    public ToolOptions() {
        super(ScienceViewMainFrame.getInstance());
        initComponents();
        setLocationRelativeTo(null);
    }

    public TemporalProjectionViewer getTemporalProjectionViewer() {
        return this.temporalViewer;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        topicsButtonGroup = new javax.swing.ButtonGroup();
        drawVertexAsButtonGroup = new javax.swing.ButtonGroup();
        topicvisualizationButtonGroup = new javax.swing.ButtonGroup();
        strokeColorVertexButtonGroup = new javax.swing.ButtonGroup();
        optionsPanel = new javax.swing.JPanel();
        fieldsPanel = new javax.swing.JPanel();
        vertexraySlider = new javax.swing.JSlider();
        closesavePanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        topicExtractionPanel = new javax.swing.JPanel();
        pcaRadioButton = new javax.swing.JRadioButton();
        pcaSettingsButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        simpleRadioButton = new javax.swing.JRadioButton();
        tagcloudRadioButton = new javax.swing.JRadioButton();
        settingsTagCloudButton = new javax.swing.JButton();
        ldaRadioButton = new javax.swing.JRadioButton();
        ldaSettingsButton = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        drawPanel = new javax.swing.JPanel();
        circlesRadioButton = new javax.swing.JRadioButton();
        dotsRadioButton = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        blackRadioButton = new javax.swing.JRadioButton();
        whiteRadioButton = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        labelsizeComboBox = new javax.swing.JComboBox(new String[]{"8","9","10","11","12", "13","14","16","18","20"});

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tool Options");
        setModal(true);

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));
        optionsPanel.setLayout(new java.awt.GridBagLayout());

        fieldsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Vertex Ray"));
        fieldsPanel.setLayout(new java.awt.GridBagLayout());

        vertexraySlider.setMajorTickSpacing(1);
        vertexraySlider.setMaximum(10);
        vertexraySlider.setMinimum(1);
        vertexraySlider.setMinorTickSpacing(1);
        vertexraySlider.setPaintLabels(true);
        vertexraySlider.setPaintTicks(true);
        vertexraySlider.setValue(1);
        vertexraySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                vertexraySliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        fieldsPanel.add(vertexraySlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        optionsPanel.add(fieldsPanel, gridBagConstraints);

        closesavePanel.setLayout(new java.awt.GridBagLayout());

        cancelButton.setText("Close");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        closesavePanel.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        optionsPanel.add(closesavePanel, gridBagConstraints);

        topicExtractionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Topic Extraction"));
        topicExtractionPanel.setLayout(new java.awt.GridBagLayout());

        topicsButtonGroup.add(pcaRadioButton);
        pcaRadioButton.setText("PCA");
        pcaRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcaRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        topicExtractionPanel.add(pcaRadioButton, gridBagConstraints);

        pcaSettingsButton.setText("Settings...");
        pcaSettingsButton.setEnabled(false);
        pcaSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcaSettingsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        topicExtractionPanel.add(pcaSettingsButton, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Topic Visualization"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        topicvisualizationButtonGroup.add(simpleRadioButton);
        simpleRadioButton.setSelected(true);
        simpleRadioButton.setText("Simple");
        simpleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(simpleRadioButton, gridBagConstraints);

        topicvisualizationButtonGroup.add(tagcloudRadioButton);
        tagcloudRadioButton.setText("Tag Cloud");
        tagcloudRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagcloudRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(tagcloudRadioButton, gridBagConstraints);

        settingsTagCloudButton.setText("Settings...");
        settingsTagCloudButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsTagCloudButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(settingsTagCloudButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        topicExtractionPanel.add(jPanel1, gridBagConstraints);

        topicsButtonGroup.add(ldaRadioButton);
        ldaRadioButton.setText("LDA");
        ldaRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ldaRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        topicExtractionPanel.add(ldaRadioButton, gridBagConstraints);

        ldaSettingsButton.setText("Settings...");
        ldaSettingsButton.setEnabled(false);
        ldaSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ldaSettingsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        topicExtractionPanel.add(ldaSettingsButton, gridBagConstraints);

        topicsButtonGroup.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Covariance");
        topicExtractionPanel.add(jRadioButton1, new java.awt.GridBagConstraints());

        jButton1.setText("Settings...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        topicExtractionPanel.add(jButton1, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        optionsPanel.add(topicExtractionPanel, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Graphics Parameters"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        drawPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Draw Vertex As"));
        drawPanel.setMinimumSize(new java.awt.Dimension(100, 69));
        drawPanel.setPreferredSize(new java.awt.Dimension(100, 69));
        drawPanel.setLayout(new java.awt.GridBagLayout());

        drawVertexAsButtonGroup.add(circlesRadioButton);
        circlesRadioButton.setSelected(true);
        circlesRadioButton.setText("Circles");
        circlesRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        circlesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circlesRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        drawPanel.add(circlesRadioButton, gridBagConstraints);

        drawVertexAsButtonGroup.add(dotsRadioButton);
        dotsRadioButton.setText("Points");
        dotsRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        dotsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dotsRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        drawPanel.add(dotsRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(drawPanel, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Vertex Stroke Color"));
        jPanel3.setMinimumSize(new java.awt.Dimension(100, 69));
        jPanel3.setPreferredSize(new java.awt.Dimension(120, 69));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        strokeColorVertexButtonGroup.add(blackRadioButton);
        blackRadioButton.setSelected(true);
        blackRadioButton.setText("Black");
        blackRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel3.add(blackRadioButton, gridBagConstraints);

        strokeColorVertexButtonGroup.add(whiteRadioButton);
        whiteRadioButton.setText("White");
        whiteRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel3.add(whiteRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(jPanel3, gridBagConstraints);

        jLabel1.setText("Label's font size:");
        jPanel4.add(jLabel1);

        labelsizeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelsizeComboBoxActionPerformed(evt);
            }
        });
        jPanel4.add(labelsizeComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        optionsPanel.add(jPanel2, gridBagConstraints);

        getContentPane().add(optionsPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void display(TemporalProjectionViewer gv) {
        if (gv != null) {
            this.temporalViewer = gv;
            this.tprojection = gv.getTemporalProjection();
            this.vertexraySlider.setValue(Vertex.getRayBase());
            this.labelsizeComboBox.setSelectedItem(Integer.toString(gv.getViewerFont().getSize()));
            this.pack();
            this.setLocationRelativeTo(this.getParent());
            this.setVisible(true);
            if (Vertex.isDrawAsCircles()) {
                this.circlesRadioButton.setSelected(true);
                this.dotsRadioButton.setSelected(false);
            } else {
                this.circlesRadioButton.setSelected(false);
                this.dotsRadioButton.setSelected(true);
            }
            if (this.tprojection.getProjectionData().hasLDAOutput()) {
                this.ldaSettingsButton.setEnabled(true);
            }
        }
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.temporalViewer.updateReport();
        this.temporalViewer = null;
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void vertexraySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_vertexraySliderStateChanged
        javax.swing.JSlider slider = (javax.swing.JSlider) evt.getSource();
        Vertex.setRayBase(slider.getValue());
        if (this.temporalViewer != null) {
            this.temporalViewer.updateImage();
        }
    }//GEN-LAST:event_vertexraySliderStateChanged

    private void pcaRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcaRadioButtonActionPerformed
        if (this.tprojection != null) {
            this.tprojection.getTopicData().setTopicType(TopicType.PCA);
        }
    }//GEN-LAST:event_pcaRadioButtonActionPerformed

    private void labelsizeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelsizeComboBoxActionPerformed
        if (this.temporalViewer != null) {
            this.temporalViewer.setViewerFont(new Font("Tahoma", java.awt.Font.PLAIN,
                    Integer.parseInt((String) labelsizeComboBox.getSelectedItem())));
        }
    }//GEN-LAST:event_labelsizeComboBoxActionPerformed

    private void circlesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circlesRadioButtonActionPerformed
        Vertex.setDrawAsCircles(true);

        if (this.temporalViewer != null) {
            this.temporalViewer.updateImage();
        }
}//GEN-LAST:event_circlesRadioButtonActionPerformed

    private void dotsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dotsRadioButtonActionPerformed
        Vertex.setDrawAsCircles(false);

        if (this.temporalViewer != null) {
            this.temporalViewer.updateImage();
        }
}//GEN-LAST:event_dotsRadioButtonActionPerformed

    private void pcaSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcaSettingsButtonActionPerformed
        if (this.tprojection != null) {
            PCATopicSettings.getInstance(this).display(this.tprojection);
        }
    }//GEN-LAST:event_pcaSettingsButtonActionPerformed

    private void simpleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleRadioButtonActionPerformed
        if (this.tprojection != null) {
            this.tprojection.getTopicData().setTypeOfTopicVisualization(TopicVisualization.SIMPLE);
            if (this.temporalViewer != null) {
                this.temporalViewer.updateImage();
            }
        }

    }//GEN-LAST:event_simpleRadioButtonActionPerformed

    private void tagcloudRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagcloudRadioButtonActionPerformed
        if (this.tprojection != null) {
            this.tprojection.getTopicData().setTypeOfTopicVisualization(TopicVisualization.TAGCLOUD);
            if (this.temporalViewer != null) {
                this.temporalViewer.updateImage();
            }
        }
    }//GEN-LAST:event_tagcloudRadioButtonActionPerformed

    private void blackRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackRadioButtonActionPerformed
        Vertex.setStrokeColor(Color.BLACK);

        if (this.temporalViewer != null) {
            this.temporalViewer.updateImage();
        }
    }//GEN-LAST:event_blackRadioButtonActionPerformed

    private void whiteRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteRadioButtonActionPerformed
        Vertex.setStrokeColor(Color.WHITE);

        if (this.temporalViewer != null) {
            this.temporalViewer.updateImage();
        }
    }//GEN-LAST:event_whiteRadioButtonActionPerformed

    private void settingsTagCloudButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsTagCloudButtonActionPerformed
        if (this.tprojection != null) {
            TagCloudSettings.getInstance(this).display(this.tprojection);
        }
    }//GEN-LAST:event_settingsTagCloudButtonActionPerformed

    private void ldaRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ldaRadioButtonActionPerformed
        if (this.tprojection != null) {
            if (tprojection.getProjectionData().hasLDAOutput()) {
                this.tprojection.getTopicData().setTopicType(TopicType.LDA);
                this.ldaSettingsButton.setEnabled(true);
            } else {
                LDADialog.getInstance(this.tprojection.getTopicData()).setVisible(true);
            }
        }
    }//GEN-LAST:event_ldaRadioButtonActionPerformed

    private void ldaSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ldaSettingsButtonActionPerformed
        if (this.tprojection != null) {
            LDATopicSettings.getInstance(this).display(tprojection);
        }
    }//GEN-LAST:event_ldaSettingsButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       if (this.tprojection != null) {
           CovarianceTopicSettings.getInstance(this).display(tprojection);
       }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    public static ToolOptions getInstance() {
        if (instance == null) {
            instance = new ToolOptions();
        }
        return instance;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton blackRadioButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton circlesRadioButton;
    private javax.swing.JPanel closesavePanel;
    private javax.swing.JRadioButton dotsRadioButton;
    private javax.swing.JPanel drawPanel;
    private javax.swing.ButtonGroup drawVertexAsButtonGroup;
    private javax.swing.JPanel fieldsPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JComboBox labelsizeComboBox;
    private javax.swing.JRadioButton ldaRadioButton;
    public javax.swing.JButton ldaSettingsButton;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JRadioButton pcaRadioButton;
    private javax.swing.JButton pcaSettingsButton;
    private javax.swing.JButton settingsTagCloudButton;
    private javax.swing.JRadioButton simpleRadioButton;
    private javax.swing.ButtonGroup strokeColorVertexButtonGroup;
    private javax.swing.JRadioButton tagcloudRadioButton;
    private javax.swing.JPanel topicExtractionPanel;
    private javax.swing.ButtonGroup topicsButtonGroup;
    private javax.swing.ButtonGroup topicvisualizationButtonGroup;
    private javax.swing.JSlider vertexraySlider;
    private javax.swing.JRadioButton whiteRadioButton;
    // End of variables declaration//GEN-END:variables
}
