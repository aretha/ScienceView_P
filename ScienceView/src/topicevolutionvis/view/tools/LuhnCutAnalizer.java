/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
 @inproceedings{paulovich2007pex,
 author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
 Minghim},
 title = {The Projection Explorer: A Flexible Tool for Projection-based 
 Multidimensional Visualization},
 booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
 Computer Graphics and Image Processing (SIBGRAPI 2007)},
 year = {2007},
 isbn = {0-7695-2996-8},
 pages = {27--34},
 doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 }
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Roberto Pinho <robertopinho@yahoo.com.br>, 
 *                 Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */
package topicevolutionvis.view.tools;

import java.awt.Dimension;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import topicevolutionvis.database.DatabaseCorpus;
import topicevolutionvis.preprocessing.Ngram;
import topicevolutionvis.preprocessing.Stopwords;
import topicevolutionvis.preprocessing.VectorSpaceRepresentation;
import topicevolutionvis.preprocessing.steemer.StemmerFactory;
import topicevolutionvis.preprocessing.steemer.StemmerType;
import topicevolutionvis.projection.ProjectionData;
import topicevolutionvis.util.SaveDialog;
import topicevolutionvis.util.SystemPropertiesManager;
import topicevolutionvis.utils.filefilter.STARTFilter;
import topicevolutionvis.utils.filefilter.StopwordsFileFilter;

/**
 *
 * @author Fernando Vieira Paulovich
 */
public class LuhnCutAnalizer extends javax.swing.JDialog {

    private ProjectionData pdata;
    private static LuhnCutAnalizer instance;
    private DefaultTableModel tableModel;
    private DatabaseCorpus corpus = null;

    /**
     * Creates new form LuhnCutAnalizer
     *
     * @param parent
     */
    protected LuhnCutAnalizer(javax.swing.JDialog parent) {
        super(parent);
        initModels();
        initComponents();

        this.setPreferredSize(new Dimension(700, 550));
        this.setSize(700, 550);
    }

    protected LuhnCutAnalizer(javax.swing.JFrame parent) {
        super(parent);
        initModels();
        initComponents();

        this.setPreferredSize(new Dimension(700, 550));
        this.setSize(700, 550);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        luhnPanel = new javax.swing.JPanel();
        zipfPanel = new javax.swing.JPanel();
        zipfCurvePanel = new ZipfCurve();
        cutConfigurationPanel = new javax.swing.JPanel();
        upperCutPanel = new javax.swing.JPanel();
        upperCutSlider = new javax.swing.JSlider();
        upperCutLabel = new javax.swing.JLabel();
        upperCutButtonPanel = new javax.swing.JPanel();
        upperCutTextField = new javax.swing.JTextField();
        upperCutPlusButton = new javax.swing.JButton();
        upperCutMinusButton = new javax.swing.JButton();
        lowerCutPanel = new javax.swing.JPanel();
        lowerCutSlider = new javax.swing.JSlider();
        lowerCutButtonPanel = new javax.swing.JPanel();
        lowerCutTextField = new javax.swing.JTextField();
        lowerCutPlusButton = new javax.swing.JButton();
        lowerCutMinusButton = new javax.swing.JButton();
        lowerCutLabel = new javax.swing.JLabel();
        ngramsPanel = new javax.swing.JPanel();
        numberGramsPanel = new javax.swing.JPanel();
        ngramsLabel = new javax.swing.JLabel();
        ngramsTextField = new javax.swing.JTextField();
        ngramsScrollPane = new javax.swing.JScrollPane();
        ngramsTable = new javax.swing.JTable();
        changeStopwordsButton = new javax.swing.JButton();
        exportStopwordsButton = new javax.swing.JButton();
        changeStartwordsButton = new javax.swing.JButton();
        exportStartwordsButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Luhn's cut-off Analysis");
        setModal(true);

        luhnPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data"));
        luhnPanel.setLayout(new java.awt.BorderLayout());

        zipfPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Zipf's Curve"));
        zipfPanel.setLayout(new java.awt.BorderLayout());
        zipfPanel.add(zipfCurvePanel, java.awt.BorderLayout.CENTER);

        luhnPanel.add(zipfPanel, java.awt.BorderLayout.CENTER);

        cutConfigurationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Cut-off Configuration"));
        cutConfigurationPanel.setLayout(new java.awt.BorderLayout());

        upperCutPanel.setLayout(new java.awt.BorderLayout());

        upperCutSlider.setMajorTickSpacing(1);
        upperCutSlider.setSnapToTicks(true);
        upperCutSlider.setValue(0);
        upperCutSlider.setInverted(true);
        upperCutSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                upperCutSliderStateChanged(evt);
            }
        });
        upperCutPanel.add(upperCutSlider, java.awt.BorderLayout.CENTER);

        upperCutLabel.setText("Upper Cut");
        upperCutPanel.add(upperCutLabel, java.awt.BorderLayout.WEST);

        upperCutButtonPanel.setLayout(new java.awt.GridBagLayout());

        upperCutTextField.setColumns(5);
        upperCutTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        upperCutButtonPanel.add(upperCutTextField, gridBagConstraints);

        upperCutPlusButton.setText("+");
        upperCutPlusButton.setPreferredSize(new java.awt.Dimension(43, 15));
        upperCutPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upperCutPlusButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        upperCutButtonPanel.add(upperCutPlusButton, gridBagConstraints);

        upperCutMinusButton.setText("-");
        upperCutMinusButton.setPreferredSize(new java.awt.Dimension(39, 15));
        upperCutMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upperCutMinusButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        upperCutButtonPanel.add(upperCutMinusButton, gridBagConstraints);

        upperCutPanel.add(upperCutButtonPanel, java.awt.BorderLayout.EAST);

        cutConfigurationPanel.add(upperCutPanel, java.awt.BorderLayout.SOUTH);

        lowerCutPanel.setLayout(new java.awt.BorderLayout());

        lowerCutSlider.setMajorTickSpacing(1);
        lowerCutSlider.setSnapToTicks(true);
        lowerCutSlider.setValue(0);
        lowerCutSlider.setInverted(true);
        lowerCutSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lowerCutSliderStateChanged(evt);
            }
        });
        lowerCutPanel.add(lowerCutSlider, java.awt.BorderLayout.CENTER);

        lowerCutButtonPanel.setLayout(new java.awt.GridBagLayout());

        lowerCutTextField.setColumns(5);
        lowerCutTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        lowerCutButtonPanel.add(lowerCutTextField, gridBagConstraints);

        lowerCutPlusButton.setText("+");
        lowerCutPlusButton.setPreferredSize(new java.awt.Dimension(43, 15));
        lowerCutPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerCutPlusButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        lowerCutButtonPanel.add(lowerCutPlusButton, gridBagConstraints);

        lowerCutMinusButton.setText("-");
        lowerCutMinusButton.setPreferredSize(new java.awt.Dimension(39, 15));
        lowerCutMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerCutMinusButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        lowerCutButtonPanel.add(lowerCutMinusButton, gridBagConstraints);

        lowerCutPanel.add(lowerCutButtonPanel, java.awt.BorderLayout.EAST);

        lowerCutLabel.setText("Lower Cut");
        lowerCutPanel.add(lowerCutLabel, java.awt.BorderLayout.WEST);

        cutConfigurationPanel.add(lowerCutPanel, java.awt.BorderLayout.NORTH);

        luhnPanel.add(cutConfigurationPanel, java.awt.BorderLayout.SOUTH);

        ngramsPanel.setLayout(new java.awt.GridBagLayout());

        ngramsLabel.setText("Number ngrams");
        numberGramsPanel.add(ngramsLabel);

        ngramsTextField.setColumns(5);
        ngramsTextField.setEditable(false);
        numberGramsPanel.add(ngramsTextField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        ngramsPanel.add(numberGramsPanel, gridBagConstraints);

        ngramsScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Ngrams and Frequency"));
        ngramsScrollPane.setPreferredSize(new java.awt.Dimension(230, 275));

        ngramsTable.setModel(this.tableModel);
        ngramsTable.setEnabled(false);
        ngramsScrollPane.setViewportView(ngramsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        ngramsPanel.add(ngramsScrollPane, gridBagConstraints);

        changeStopwordsButton.setText("Change Stopwords");
        changeStopwordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeStopwordsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ngramsPanel.add(changeStopwordsButton, gridBagConstraints);

        exportStopwordsButton.setText("Export Stopwords");
        exportStopwordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportStopwordsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ngramsPanel.add(exportStopwordsButton, gridBagConstraints);

        changeStartwordsButton.setText("Change Startwords");
        changeStartwordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeStartwordsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ngramsPanel.add(changeStartwordsButton, gridBagConstraints);

        exportStartwordsButton.setText("Export Startwords");
        exportStartwordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportStartwordsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ngramsPanel.add(exportStartwordsButton, gridBagConstraints);

        luhnPanel.add(ngramsPanel, java.awt.BorderLayout.EAST);

        getContentPane().add(luhnPanel, java.awt.BorderLayout.CENTER);

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportStopwordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportStopwordsButtonActionPerformed
        try {
            final JFileChooser fc = new JFileChooser();
            fc.setMultiSelectionEnabled(false);
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            SystemPropertiesManager m = SystemPropertiesManager.getInstance();
            String directory = m.getProperty("SPW.DIR");
            if (directory != null) {
                fc.setCurrentDirectory(new File(directory));
            } else {
                fc.setCurrentDirectory(new File("."));
            }

            fc.setFileFilter(new StopwordsFileFilter());
            int result = fc.showSaveDialog(this);


            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = fc.getSelectedFile().getAbsolutePath();
                this.exportStopWords(filename);
            }

        } catch (IOException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportStopwordsButtonActionPerformed

    private void upperCutMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upperCutMinusButtonActionPerformed
        this.upperCutSlider.setValue(this.upperCutSlider.getValue() + 1);
    }//GEN-LAST:event_upperCutMinusButtonActionPerformed

    private void upperCutPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upperCutPlusButtonActionPerformed
        this.upperCutSlider.setValue(this.upperCutSlider.getValue() - 1);
    }//GEN-LAST:event_upperCutPlusButtonActionPerformed

    private void lowerCutMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerCutMinusButtonActionPerformed
        this.lowerCutSlider.setValue(this.lowerCutSlider.getValue() + 1);
    }//GEN-LAST:event_lowerCutMinusButtonActionPerformed

    private void lowerCutPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerCutPlusButtonActionPerformed
        this.lowerCutSlider.setValue(this.lowerCutSlider.getValue() - 1);
    }//GEN-LAST:event_lowerCutPlusButtonActionPerformed

    private void changeStopwordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeStopwordsButtonActionPerformed
        WordsManager.getInstance(this, true).display();
    }//GEN-LAST:event_changeStopwordsButtonActionPerformed

    private void lowerCutSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lowerCutSliderStateChanged
        int upperCut = this.upperCutSlider.getValue();
        int lowerCut = this.lowerCutSlider.getValue();

        int[] freqs = ((ZipfCurve) this.zipfCurvePanel).setCutLines(lowerCut, upperCut);
        this.lowerCutTextField.setText(Integer.toString(lowerCut));
        this.upperCutTextField.setText(Integer.toString(upperCut));
        this.ngramsTable.setRowSelectionInterval(freqs[0], freqs[1]);
        this.ngramsTextField.setText(Integer.toString(freqs[1] - freqs[0] + 1));

        if (this.lowerCutSlider.getValue() > this.upperCutSlider.getValue()) {
            this.upperCutSlider.setValue(this.lowerCutSlider.getValue());
        }
    }//GEN-LAST:event_lowerCutSliderStateChanged

    private void upperCutSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_upperCutSliderStateChanged
        int upperCut = this.upperCutSlider.getValue();
        int lowerCut = this.lowerCutSlider.getValue();

        int[] freqs = ((ZipfCurve) this.zipfCurvePanel).setCutLines(lowerCut, upperCut);
        this.lowerCutTextField.setText(Integer.toString(lowerCut));
        this.upperCutTextField.setText(Integer.toString(upperCut));
        this.ngramsTable.setRowSelectionInterval(freqs[0], freqs[1]);
        this.ngramsTextField.setText(Integer.toString(freqs[1] - freqs[0] + 1));

        if (this.upperCutSlider.getValue() < this.lowerCutSlider.getValue()) {
            this.lowerCutSlider.setValue(this.upperCutSlider.getValue());
        }
    }//GEN-LAST:event_upperCutSliderStateChanged

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (this.lowerCutTextField.getText().trim().length() > 0) {
            this.pdata.setLunhLowerCut(Integer.parseInt(this.lowerCutTextField.getText()));
        }
        if (this.upperCutTextField.getText().trim().length() > 0) {
            this.pdata.setLunhUpperCut(Integer.parseInt(this.upperCutTextField.getText()));
        }
        this.dispose();

    }//GEN-LAST:event_okButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void changeStartwordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeStartwordsButtonActionPerformed
        WordsManager.getInstance(this, false).display();
}//GEN-LAST:event_changeStartwordsButtonActionPerformed

    private void exportStartwordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportStartwordsButtonActionPerformed
        try {
            int result = SaveDialog.showSaveDialog(new STARTFilter(), this, "startwords.stw");

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = SaveDialog.getFilename();
                this.exportStartWords(filename);
            }

        } catch (IOException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_exportStartwordsButtonActionPerformed

    protected void exportStartWords(String filename) throws IOException {

        boolean useStopword = this.pdata.isUseStopword();


        StemmerType.Type stemmer = this.pdata.getStemmer();


        int nrGrams = pdata.getNumberGrams();
        int lowercut = pdata.getLunhLowerCut();


        if (this.lowerCutTextField.getText().trim().length() > 0) {
            lowercut = Integer.parseInt(this.lowerCutTextField.getText());
        }

        int uppercut = -1;
        if (this.upperCutTextField.getText().trim().length() > 0) {
            uppercut = Integer.parseInt(this.upperCutTextField.getText());
        }

        VectorSpaceRepresentation pre = new VectorSpaceRepresentation(corpus);
        ArrayList<Ngram> res_ngrams = pre.getNgramsAccordingTo(lowercut, uppercut, nrGrams, stemmer, useStopword);
//        Collections.sort(res_ngrams, new Comparator<Ngram>() {
//            @Override
//            public int compare(Ngram o1, Ngram o2) {
//                return (o1.ngram.compareTo(o2.ngram));
//            }
//        });

        //saving to the file
        BufferedWriter out = null;
        try {
            out = new BufferedWriter(new FileWriter(filename));
            for (Ngram stt : res_ngrams) {
                out.write(stt.ngram);
                out.write("\r\n");
            }
        } catch (IOException ex) {
            throw new IOException(ex.getMessage());
        } finally {
            if (out != null) {
                try {
                    out.flush();
                    out.close();
                } catch (IOException e1) {
                    throw new IOException(e1.getMessage());
                }
            }
        }
    }

    public static LuhnCutAnalizer getInstance(java.awt.Container parent) {
        if (instance == null || instance.getParent() != parent) {
            if (parent instanceof javax.swing.JFrame) {
                instance = new LuhnCutAnalizer((javax.swing.JFrame) parent);
            } else if (parent instanceof javax.swing.JDialog) {
                instance = new LuhnCutAnalizer((javax.swing.JDialog) parent);
            }
        }
        return instance;
    }

    public void display(ProjectionData pdata) {
        this.pdata = pdata;
        this.corpus = pdata.getDatabaseCorpus();
        this.upperCutTextField.setText(null);
        this.lowerCutTextField.setText(null);
        this.ngramsTextField.setText(null);

        this.lowerCutSlider.setEnabled(false);
        this.lowerCutSlider.setValue(0);
        this.upperCutSlider.setEnabled(false);
        this.upperCutSlider.setValue(0);

        ((ZipfCurve) this.zipfCurvePanel).setNgrams(null);

        this.initModels();
        this.ngramsTable.setModel(this.tableModel);

        try {
            HashMap<String, Ngram> corporaNgrams = new HashMap<>();
            this.countWordsFrequency(corporaNgrams);

            int lowercut = pdata.getLunhLowerCut();


            //Remove the ngrams which occurs less than LUHN-LOWER-CUT times
            List<Ngram> ngrams = new ArrayList<>();
            if (lowercut != -1) {
                for (Ngram n : corporaNgrams.values()) {
                    if (n.frequency >= lowercut) {
                        ngrams.add(n);
                    }
                }
            } else {
                ngrams.addAll(corporaNgrams.values());

            }

            //Sorting the ngrams by its frequency in decreasing order
            Collections.sort(ngrams);

            this.initModels();
            this.ngramsTable.setModel(this.tableModel);

            String[] label;
            for (int i = 0; i < ngrams.size(); i++) {
                label = new String[2];
                label[0] = ngrams.get(i).ngram;
                label[1] = Integer.toString(ngrams.get(i).frequency);
                this.tableModel.addRow(label);
            }

            ((ZipfCurve) this.zipfCurvePanel).setNgrams(ngrams);

            int max = ngrams.get(0).frequency, min = ngrams.get(ngrams.size() - 1).frequency;

            this.lowerCutSlider.setMaximum(max);
            this.lowerCutSlider.setMinimum(min);
            this.lowerCutSlider.setEnabled(true);

            this.upperCutSlider.setMaximum(max);
            this.upperCutSlider.setMinimum(min);
            if (pdata.getReferencesUpperCut() != -1) {
                this.upperCutSlider.setValue(pdata.getLunhUpperCut());
            } else {
                this.upperCutSlider.setValue(max);
            }
            this.upperCutSlider.setEnabled(true);

        } catch (IOException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }

        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

//    protected void analizeButtonAction(java.awt.event.ActionEvent evt) {
//        ArrayList<Ngram> docsfreq;
//        try {
//            boolean useStopword = this.pdata.isUseStopword();
//            Stopwords stp = null;
//            if (pdata.getStemmer() != StemmerType.NONE) {
//                docsfreq = corpus.getDocumentsFrequency(true);
//            } else {
//                docsfreq = corpus.getDocumentsFrequency(false);
//            }
//            ArrayList<Ngram> corpusgrams = corpus.getCorpusNgrams();
//
//            HashMap<String, Ngram> ngrams_aux = new HashMap<String, Ngram>();
//            int lowercut = pdata.getLunhLowerCut();
//            int size = corpusgrams.size();
//            if (useStopword) {
//                stp = Stopwords.getInstance();
//            }
//
//            for (int i = 0; i < size; i++) {
//                Ngram n = corpusgrams.get(i);
//                if (useStopword && !stp.isStopWord(n.ngram)) {
//                }
//            }
//
//        } catch (IOException ex) {
//            Logger.getLogger(LuhnCutAnalizer.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    protected void closeButtonAction(java.awt.event.ActionEvent evt) {
    }

    protected void countWordsFrequency(HashMap<String, Ngram> corporaNgrams) throws IOException {
        boolean useStopword = true;

        StemmerType.Type stemmer = this.pdata.getStemmer();

        int lowercut = pdata.getLunhLowerCut();
        int nrGrams = pdata.getNumberGrams();

        VectorSpaceRepresentation pre = new VectorSpaceRepresentation(corpus);
        ArrayList<Ngram> ngrams = pre.getNgramsAccordingTo(lowercut, -1, nrGrams, stemmer, useStopword);

        for (Ngram n : ngrams) {
            corporaNgrams.put(n.ngram, n);
        }
    }

    protected void exportStopWords(String filename) throws IOException {
        boolean useStopword = this.pdata.isUseStopword();
        StemmerType.Type stemmer = this.pdata.getStemmer();
        int nrGrams = pdata.getNumberGrams();
        int lowercut = pdata.getLunhLowerCut();
        if (this.lowerCutTextField.getText().trim().length() > 0) {
            lowercut = Integer.parseInt(this.lowerCutTextField.getText());
        }

        int uppercut = -1;
        if (this.upperCutTextField.getText().trim().length() > 0) {
            uppercut = Integer.parseInt(this.upperCutTextField.getText());
        }

        VectorSpaceRepresentation pre = new VectorSpaceRepresentation(corpus);
        ArrayList<Ngram> res_ngrams = pre.getNgramsAccordingTo(lowercut, uppercut, nrGrams, stemmer, useStopword);
        ArrayList<Ngram> corpus_ngrams = pre.getNgramsAccordingTo(1, -1, nrGrams, StemmerType.Type.NONE, useStopword);
        List<String> stopwords = Stopwords.getInstance().getStopwordList();

        for (int i = 0; i < corpus_ngrams.size(); i++) {
            boolean contain = false;
            for (int j = 0; j < res_ngrams.size(); j++) {
                String corpus_ngram = corpus_ngrams.get(i).ngram;
                corpus_ngram = StemmerFactory.getInstance(stemmer).stem(corpus_ngram);

                if (corpus_ngram.equals(res_ngrams.get(j).ngram)) {
                    contain = true;
                    break;
                }
            }

            if (!contain) {
                stopwords.add(corpus_ngrams.get(i).ngram);
            }
        }

        Collections.sort(stopwords);

        //saving to the file
        BufferedWriter out = null;
        try {
            out = new BufferedWriter(new FileWriter(filename));
            for (String stp : stopwords) {
                out.write(stp);
                out.write("\n");
            }
        } catch (IOException ex) {
            throw new IOException(ex.getMessage());
        } finally {
            //fechar o arquivo
            if (out != null) {
                try {
                    out.flush();
                    out.close();
                } catch (IOException e1) {
                    throw new IOException(e1.getMessage());
                }
            }
        }
    }

    protected void initModels() {
        String[] titulos = new String[]{"Ngram", "Frequency"};
        this.tableModel = new DefaultTableModel(null, titulos);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton changeStartwordsButton;
    private javax.swing.JButton changeStopwordsButton;
    protected javax.swing.JButton closeButton;
    private javax.swing.JPanel cutConfigurationPanel;
    private javax.swing.JButton exportStartwordsButton;
    private javax.swing.JButton exportStopwordsButton;
    private javax.swing.JPanel lowerCutButtonPanel;
    private javax.swing.JLabel lowerCutLabel;
    private javax.swing.JButton lowerCutMinusButton;
    private javax.swing.JPanel lowerCutPanel;
    private javax.swing.JButton lowerCutPlusButton;
    protected javax.swing.JSlider lowerCutSlider;
    protected javax.swing.JTextField lowerCutTextField;
    private javax.swing.JPanel luhnPanel;
    private javax.swing.JLabel ngramsLabel;
    private javax.swing.JPanel ngramsPanel;
    private javax.swing.JScrollPane ngramsScrollPane;
    protected javax.swing.JTable ngramsTable;
    protected javax.swing.JTextField ngramsTextField;
    private javax.swing.JPanel numberGramsPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel upperCutButtonPanel;
    private javax.swing.JLabel upperCutLabel;
    private javax.swing.JButton upperCutMinusButton;
    private javax.swing.JPanel upperCutPanel;
    private javax.swing.JButton upperCutPlusButton;
    protected javax.swing.JSlider upperCutSlider;
    protected javax.swing.JTextField upperCutTextField;
    protected javax.swing.JPanel zipfCurvePanel;
    private javax.swing.JPanel zipfPanel;
    // End of variables declaration//GEN-END:variables
}
